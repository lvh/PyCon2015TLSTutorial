#+Title: The Hitchhiker's Guide to TLS
#+Author:
#+Email:

#+OPTIONS: toc:nil reveal_rolling_links:nil num:nil reveal_history:true
#+REVEAL_TRANS: linear
#+REVEAL_THEME: rackspace

#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="asciinema/asciinema-player.css" />
<script src="asciinema/asciinema-player.js"></script>
#+END_HTML

* Tutorial materials

  ~https://www.lvh.io/hhgtls~

* Introduction

* Servers

** Configuring TLS servers

* Twisted

* Automated analysis

** SSLLabs

** sslyze

* Using OpenSSL

 #+BEGIN_HTML
  <div id="asciinema-lvh-io-no-sni"></div>
  <script>
  asciinema.player.js.CreatePlayer('asciinema-lvh-io-no-sni', 'asciicast/lvh-io-no-sni.json', {fontSize: 16});
  </script>
 #+END_HTML

* SNI

  (Server Name Indication)

** Problem

   * Client connects to website, looks up IP
   * Expects TLS with cert for correct /hostname/
   * What if I host multiple sites on 1 IP?

** Historical reason TLS is expensive

   * 1 site per public IPv4 address
   * IPv4 addresses are expensive
   * â‡’ TLS is expensive

** No longer true!

** Enabling SNI with OpenSSL

 #+BEGIN_HTML
  <div id="asciinema-lvh-io-yes-sni"></div>
  <script>
  asciinema.player.js.CreatePlayer('asciinema-lvh-io-yes-sni', 'asciicast/lvh-io-yes-sni.json', {fontSize: 16});
  </script>
 #+END_HTML

* Cipher overlap

 #+BEGIN_HTML
  <div id="asciinema-lvh-io-yes-sni"></div>
  <script>
  asciinema.player.js.CreatePlayer('asciinema-lvh-io-yes-sni', 'asciicast/lvh-io-yes-sni.json', {fontSize: 16});
  </script>
 #+END_HTML

* NPN/ALPN

** NPN

 #+BEGIN_HTML
  <div id="asciinema-npn"></div>
  <script>
  asciinema.player.js.CreatePlayer('asciinema-npn', 'asciicast/npn.json', {fontSize: 16});
  </script>
 #+END_HTML

** ALPN

 #+BEGIN_HTML
  <div id="asciinema-alpn"></div>
  <script>
  asciinema.player.js.CreatePlayer('asciinema-alpn', 'asciicast/alpn.json', {fontSize: 16});
  </script>
 #+END_HTML

* Cert pinning

** Reminder: CAs are your trust root

   You trust /x/ is /x/ because a CA said so

*** Rogue CA?

    #+ATTR_HTML: :style width:80%
    [[./media/CNNICRootCA.png]]

*** Planted root CA?

    * Part of an attack
    * Mandated by employer

*** Mandated by employer?

    Having internal CA makes sense

*** Name constraints

*** Forgery as a Service

    e.g sslbump

** Cert pinning

*** Babylonian confusion

    * Sometimes means "trust exactly this cert"
    * Sometimes, you have to rotate a key

*** GMail should be signed by Google

    Browsers (esp. Chrome) should know this

*** Forgery as a Service

** HSTS

   HTTP Strict Transport Security

*** Some sites should always HTTPS

    Browsers should know this

*** HSTS header

    ~Strict-Transport-Security: max-age=31536000~

*** Opt-in!

*** Only works on next-use

*** HSTS preloading

    Used by all major browsers

*** Opt-in

    ~Strict-Transport-Security: max-age=31536000; preload~

** HPKP

   HTTP Public Key Pinning

*** DigiCert is my CA, not the DoD

    Browsers should know this

*** Specify which CA(s) in HSTS

    Early stages!

    * Chrome has a hardcoded list
    * Firefox working on it
    * Spec is a WIP

* Alternative trust chains

** Self-signed certs

*** Problem: key rotation

*** Conclusion

    * Probably not
    * Must control client, server deploys in lockstep

** Running your own internal CA

*** CAs aren't magic

    ~CA=true~

    [[./media/CABasicConstraints.png]]

*** We can do that ourselves!

    ... just gotta trust my root cert

*** Freedom in issuing certs

    * ECDSA? Sure!
    * 1000 client certs? Sure!

*** Protection against rogue CA

    Mossad threat model

*** Operational challenges

    How securely can you run a CA?

* Client certificates

** Recap: "normal" TLS

   * Server is authenticated by TLS (certificate)
   * Client is /not/ authenticated by TLS
   * Client auth happens in app layer
     * Login form, cookies, ...

*** Alternative: client certificates

    Both peers exchange & verify certs

*** Who signs your certs?

   Probably need your own CA
